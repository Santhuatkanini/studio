// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent to generate training data from raw documents using prompt engineering.
 *
 * - generateTrainingData - A function that handles the training data generation process.
 * - GenerateTrainingDataInput - The input type for the generateTrainingData function.
 * - GenerateTrainingDataOutput - The return type for the generateTrainingData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTrainingDataInputSchema = z.object({
  documentText: z
    .string()
    .describe('The raw document text to generate training data from.'),
  taskDescription: z
    .string()
    .describe('A description of the task for which the training data will be used.'),
  numExamples: z
    .number()
    .int()
    .positive()
    .default(5)
    .describe('The number of training examples to generate.'),
});
export type GenerateTrainingDataInput = z.infer<typeof GenerateTrainingDataInputSchema>;

const TrainingExampleSchema = z.object({
  input: z.string().describe('The input for the training example.'),
  output: z.string().describe('The desired output for the training example.'),
});

const GenerateTrainingDataOutputSchema = z.array(TrainingExampleSchema).describe('An array of training examples.');
export type GenerateTrainingDataOutput = z.infer<typeof GenerateTrainingDataOutputSchema>;

export async function generateTrainingData(input: GenerateTrainingDataInput): Promise<GenerateTrainingDataOutput> {
  return generateTrainingDataFlow(input);
}

const generateTrainingDataPrompt = ai.definePrompt({
  name: 'generateTrainingDataPrompt',
  input: {schema: GenerateTrainingDataInputSchema},
  output: {schema: GenerateTrainingDataOutputSchema},
  prompt: `You are an expert machine learning engineer specializing in generating training data for large language models.

You will generate training data from the provided document text for the specified task. Each training example should consist of an input and a desired output.

Document Text: {{{documentText}}}
Task Description: {{{taskDescription}}}
Number of Examples: {{{numExamples}}}

Format the output as a JSON array of objects. Each object should have an "input" and an "output" field.

Example:
[
  {
    "input": "Example input 1",
    "output": "Example output 1"
  },
  {
    "input": "Example input 2",
    "output": "Example output 2"
  }
]
`,
});

const generateTrainingDataFlow = ai.defineFlow(
  {
    name: 'generateTrainingDataFlow',
    inputSchema: GenerateTrainingDataInputSchema,
    outputSchema: GenerateTrainingDataOutputSchema,
  },
  async input => {
    const {output} = await generateTrainingDataPrompt(input);
    return output!;
  }
);
